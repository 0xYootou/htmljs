// Generated by CoffeeScript 1.9.3
(function () {
  var func_music, musics;
  UPYun = require("upyun");
  config = require('./../config.coffee');
  func_music = __F('music');
  func_fav = __F('music_fav');
  func_play = __F('music_play');
  func_formid = __F('music_formid');
  func_message = __F('music_message');
  var async = require('async');
  musics = {};
  Sequelize = require("sequelize")
  MusicPlay = new __BaseModel('music_play');
  SearchHistory = new __BaseModel('music_search_history');
  SearchHistory.sync();
  Music = new __BaseModel('musics');
  MusicShare = new __BaseModel('music_share');
  MusicFav = new __BaseModel('music_fav');
  MusicZip = new __BaseModel('music_zip');
    MusicUserApp = new __BaseModel('music_user_app');
  MusicSub = new __BaseModel('music_sub');
  MusicCat = __F('music_cat');
  func_cat_music = __F('music_cat_music');
  func_user = __F('music_user');
  MusicShare.sync()
  MusicZip.sync()
  MusicSub.sync()
    MusicUserApp.sync();
  var JPush = require("jpush-sdk")
  var client = JPush.buildClient('cf90baac6270be6893875d38', '1d7a4fab0fb945171ef9a59f')
  var request = require('request');
  fs = require('fs');
  var create_xqr = require('./../lib/create_xqr');
  var send_msg = require('./../lib/create_msg');
  var moment = require('moment')
  var WXBizDataCrypt = require('./../lib/WXBizDataCrypt')
  var lastIndexCacheTime = 0;
  var indexCaches = {
    data : {

    },
    set: function(key, value){
      lastIndexCacheTime = new Date().getTime();
      indexCaches.data[key] = value;
    },
    get:function(key){
      if(new Date().getTime() - lastIndexCacheTime> 60*60*1000*24){
        return null;
      }else{
        return indexCaches.data[key]
      }
    }
  }

  function addMessage(title,content,type,link,story_id,withpush){
    if(withpush){
      var extra = {

      }
      if(story_id){
        extra = {
          type:'to_story',
            id: story_id
        }
      }else if(link){
        extra = {
          type:'open',
          url: link
        }
      }
      client.push().setPlatform('ios')
        .setAudience(JPush.ALL)
        .setNotification( title,JPush.ios({
          "title" : title,
          body:content
        }, '', 1,null,extra))
        .setMessage(content)
        .setOptions(null, 86400, null, true)
        .send(function (err, res) {
          if (err) {
            console.log('pusherr:' + err.message)
          } else {

          }
        });
    }

    func_message.add({
      title: title,
      content: content,
      type:type,
      link:link,
      story_id:story_id
    },function(){

    })
  }

  module.exports.controllers = {

    "/rokid": {
      get: function () {
          console.log(req.query);
      },
      post: function (req, res) {
          console.log(req.body);
          if(req.body.request.content.intent == 'ROKID.INTENT.WELCOME') {
              return res.send({
                  "version": "2.0.0",
                  "session": {
                      "attributes": {
                          "key1": {"type":"","value":""}
                      }
                  },
                  "response": {
                      "card": {
                          "type": "chat",
                          "content": "说出你想听的故事"
                      },
                      "action": {
                          "version": "2.0.0",
                          "type": "NORMAL",
                          "form": "scene",
                          "shouldEndSession": false,
                          "directives": [{
                              "type": "voice",
                              "action": "PLAY",
                              "disableEvent": false,
                              "item": {
                                  "itemId": "fsdfdsfdsf",
                                  "tts": "说出你想听的故事"
                              }
                          },{
                              "type":"pickup",
                              "enable": true,
                              "durationInMilliseconds": 1000,
                              "retryTts":"说出你想听的故事2"
                          }]
                      }
                  }

              });
          }
          if(req.body.request.content.intent == 'play') {

              var title = req.body.request.content.sentence;

              title = title.replace('播放','');

              func_music.getByField({title:title},function(err,music){
                  if(music){
                      res.send({
                          "version": "2.0.0",
                          "session": {
                              "attributes": {
                                  "key1": {"type":"","value":""}
                              }
                          },
                          "response": {
                              "card" : {
                                  "type" : "chat",
                                  "content" : music.title
                              },
                              "action": {
                                  "version": "2.0.0",
                                  "type": "NORMAL",
                                  "form": "scene",
                                  "shouldEndSession": true,
                                  "directives": [
                                      {
                                          "type":"media",
                                          "action": "PLAY",
                                          "disableEvent":false,
                                          "item": {
                                              "itemId":"xxxdddx123321",
                                              "token": "xxxddddx",
                                              "type": "AUDIO",
                                              "url": music.audio,
                                              "offsetInMilliseconds": 0
                                          }
                                      }

                                  ]
                              }
                          }
                      })
                  }else{
                      res.send({
                          "version": "2.0.0",
                          "session": {
                              "attributes": {
                                  "key1": {"type":"","value":""}
                              }
                          },
                          "response": {
                              "card": {
                                  "type": "chat",
                                  "content": "找不到您想听的故事"
                              },
                              "action": {
                                  "version": "2.0.0",
                                  "type": "NORMAL",
                                  "form": "scene",
                                  "shouldEndSession": false,
                                  "directives": [{
                                      "type": "voice",
                                      "action": "PLAY",
                                      "disableEvent": false,
                                      "item": {
                                          "itemId": "fsdfdsfdsf",
                                          "tts": "找不到您想听的故事"
                                      }
                                  }]
                              }
                          }

                      });
                  }
              })
          }


      }
    },
      "/login/checkPhone":{
        post: function(req,res){
            var phone = req.body.phone;
            if(!phone || phone.length != 11){
                res.send({
                    success:0,
                    message: '手机号格式不正确'
                });
            }
            MusicUserApp.find({
                where:{
                    phone: phone
                }
            }).success(function(user){
                if(user){
                    res.send({
                        success: 1,
                        registed: 1
                    })
                }else{
                    res.send({
                        success: 1,
                        registed: 0
                    })
                }


            }).error(function(){
                res.send({
                    success:0,
                    message: '查询出错'
                });
            });
        }
      },
      "/login/register":{
          post: function(req,res){
              var phone = req.body.phone;
              var code = req.body.code;
              var name = req.body.name;
              var password = req.body.password;
              if(!phone || phone.length != 11){
                  return res.send({
                      success:0,
                      message: '手机号格式不正确'
                  });
              }
              if(!name){
                  return res.send({
                      success:0,
                      message: '请填写姓名'
                  });
              }
              if(!password){
                  return res.send({
                      success:0,
                      message: '请填写密码'
                  });
              }
              if(password.length<6){
                  return res.send({
                      success:0,
                      message: '密码不能低于6位'
                  });
              }
              MusicUserApp.create({
                  phone: phone,
                  name:name,
                  password:password
              }).success(function(user){
                  res.send({
                      success: 1,
                  })
              }).error(function(){
                  res.send({
                      success:0,
                      message: '系统出错'
                  });
              });
          }
      },
    "/subscribe/add":{
      post: function(req,res){
        var music_id = req.body.music_id;
        var user_id = req.body.user_id;

        MusicSub.count({
            where:{
              user_id: user_id
            }
        }).success(function(count){
            if(count < 5){
                MusicSub.create(req.body)
                res.send({
                    success:1
                });
            }else{
                res.send({
                    success:0,
                    message: '借阅已超过 5 本'
                });
            }

        }).error(function(){
            res.send({
                success:0,
                message: '查询出错'
            });
        });

      }
    },
      "/subscribe/my":{
          post: function(req,res){
              var user_id = req.body.user_id;

              MusicSub.find({
                 where:['user_id = ? and (createdAt > (NOW() - INTERVAL 10 DAY) or (createdAt > (NOW() - INTERVAL 15 DAY) and is_down != 1) )',user_id]
              }).success(function(subs){

                  res.send({
                      success:1,
                      data: subs
                  });


              }).error(function(){
                  res.send({
                      success:0,
                      message: '查询出错'
                  });
              });

          }
      },
    "/message/add":{
      post: function(req,res){
        addMessage(req.body.title,req.body.content,req.body.type,req.body.link,req.body.story_id,req.body.send_push)
        res.redirect('/music/message/list')
      },
      get: function(req,res) {
        res.render('music/message_add.jade')
      }
    },
    "/message/add_click":{
      post: function(req,res){
        var id = req.body.id;
        func_message.addCount(id,'click_count')
        res.send({
          success:1
        })
      },
    },
    "/message/list":{
      get: function(req,res){
        var condition, count, page;
        page = req.query.page || 1;
        count = req.query.count || 10;
        condition = null;
        return func_message.count(condition, function (error, _count) {
          if (error) {
            return next(error);
          } else {
            res.locals.total = _count;
            res.locals.totalPage = Math.ceil(_count / count);
            res.locals.page = req.query.page || 1;
            return func_message.getAll(page, count, condition, 'createdAt desc', function (error, messages) {
              if (error) {
                return next(error);
              } else {
                res.locals.messages = messages;
                return res.render('music/message_list.jade');
              }
            });
          }
        });

      }
    },
    "/message/list.json":{
      get: function(req,res){
        var condition, count, page;
        page = req.query.page || 1;
        count = req.query.count || 10;
        condition = null;
        var result = {

        }
        return func_message.count(condition, function (error, _count) {
          if (error) {
            return res.send({
              success:0
            })
          } else {
            result.total = _count;
            result.totalPage = Math.ceil(_count / count);
            result.page = req.query.page || 1;
            return func_message.getAll(page, count, condition, 'createdAt desc', function (error, messages) {
              if (error) {
                return res.send({
                  success:0
                });
              } else {
                messages.forEach(function(m){
                    m.dataValues.time = moment(m.createdAt).fromNow();
                    if(m.type == 1){
                        m.dataValues.icon = "http://img.souche.com/test/7d08e778530bc6070b79b53c629f16e1.png";
                    }else if(m.type == 2){
                        m.dataValues.icon = "http://img.souche.com/test/6f348b6acd3333b4e13d5f95b1805263.png";

                    }else if(m.type == 3){
                        m.dataValues.icon = "http://img.souche.com/test/5bed0587a406b075a7bc808f464b4153.png";

                    }else {
                        m.dataValues.icon = "http://img.souche.com/test/5bed0587a406b075a7bc808f464b4153.png";
                    }
                })
                result.messages = messages;
                res.send({
                  success: 1,
                  data:result
                })
              }
            });
          }
        });
      }
    },
      "/message/list_v2.json":{
          get: function(req,res){
              var condition, count, page;
              page = req.query.page || 1;
              count = req.query.count || 10;
              condition = null;
              var result = {

              }
              return func_message.count(condition, function (error, _count) {
                  if (error) {
                      return res.send({
                          success:0
                      })
                  } else {
                      result.total = _count;
                      result.totalPage = Math.ceil(_count / count);
                      result.page = req.query.page || 1;
                      return func_message.getAll(page, count, condition, 'createdAt desc', function (error, messages) {
                          if (error) {
                              return res.send({
                                  success:0
                              });
                          } else {
                              messages.forEach(function(m){
                                  m.dataValues.time = moment(m.createdAt).fromNow();
                                  if(m.type == 1){
                                      m.dataValues.icon = "http://img.souche.com/test/aad8ca98d7b3b47e3b745fd1b0c13211.png";
                                  }else if(m.type == 2){
                                      m.dataValues.icon = "http://img.souche.com/test/d5ed48db3c6208ca0ec4989989cad558.png";

                                  }else if(m.type == 3){
                                      m.dataValues.icon = "http://img.souche.com/test/ce371ed3a367fcac8828849fe7303dfa.png";

                                  }else {
                                      m.dataValues.icon = "http://img.souche.com/test/ce371ed3a367fcac8828849fe7303dfa.png";
                                  }
                              })
                              result.messages = messages;
                              res.send({
                                  success: 1,
                                  data:result
                              })
                          }
                      });
                  }
              });
          }
      },
    "/message/unread/count":{
      get:function(req,res){
        var last_id = req.query.last_id;
        var condition = null;
        var result = {};
        if (last_id) {
          condition = ['id > ?', last_id];
        }
        func_message.count(condition, function (error, _count) {
          if (error) {
            return res.send({
              success: 0
            })
          } else {
            result.total = _count;
            res.send({
              success:1 ,
              data: result
            })
          }
        });
      }
    },
    "/cat/admin/list": {
      get: function (req, res) {
        MusicCat.getAll(1, 100, {}, function (err, cats) {

          async.eachLimit(cats, 1, function (cat, callback) {
            sequelize.query('select * from music_cat_music  LEFT JOIN musics\n' +
              '       ON (musics.id = music_cat_music.music_id) where music_cat_music.cat_id=' + cat.id + ';').then(function (musics) {
              cat.musics = musics;
              callback();
            })
          }, function () {
            res.locals.cats = cats;
            res.render('music/cat-list-admin.jade')
          })


        });
      }
    },
    "/cat/music": {
      post: function (req, res) {
        func_cat_music.add(req.body, function () {
          res.send({
            success: 1
          })
        })
      },
      delete: function (req, res) {
        func_cat_music.deleteByCondition(req.body, function () {
          res.send({
            success: 1
          })
        })
      }
    },
    "/cat/add": {
      get: function (req, res) {
        var id = req.query.id;
        async.waterfall([
          function (callback) {
            if (!id) {
              return callback(null, null);
            }
            MusicCat.getById(id, function (err, cat) {
              if (cat) {
                callback(null, cat);
              } else {
                callback(null, null);
              }
            })
          },
          function (cat, callback) {
            res.locals.cat = cat;
            callback();
          }
        ], function () {
          res.render('music/cat_add.jade')
        })
      },
      post: function (req, res) {
        if (req.body.id) {
          MusicCat.update(req.body.id, req.body, function () {
            res.redirect('/music/cat/admin/list')
          })
        } else {
          MusicCat.add(req.body, function () {
            res.redirect('/music/cat/admin/list')
          })
        }
      }
    },

    "/add_formid": {
      post: function (req, res) {
        var form_id = req.body.form_id
        var user_id = req.body.user_id;
        if (form_id.indexOf('mock') != -1) {
          return res.send({})
        }
        func_formid.add(req.body, function (e) {
          res.send({})
        })
      }
    },
    "/send_weixin/:id.json": {
      get: function (req, res) {
        var music_id = req.params.id
        func_music.getById(req.params.id, function (error, music) {

          send_msg(music)
        })
      }
    },
    "/add_zip":{
      post: function(req,res){
        MusicZip.create({
          zip:req.body.zip,
          user_id:req.body.user_id,
          story_id:req.body.story_id
        })
        res.send({
          success:1
        })
      }
    },
    "/search.json": {
      get: function (req, res) {

        Music.findAll({
          where: {
            title: {
              like: "%" + req.query.keyword + "%"
            }
          }
        }).then(function (records) {
          SearchHistory.count({
            where:{
              keyword:req.query.keyword
            }
          }).then(function(count){
            SearchHistory.create({
              user_id: req.query.user_id,
              keyword: req.query.keyword,
              result_count: records.length || 0,
              search_count: count+1
            })
          })

          res.send(records);
        }).error(function () {
          res.send([])
        })

      }
    },
    "/hot_search.json":{
      get: function(req,res){
        sequelize.query('select id,keyword,count(*) as search_count,result_count from music_search_history as i' +
          '  where keyword != \'\' group by i.keyword order by 3  desc limit 0,40').then(function (musics) {
          res.send(musics);
        })
      }
    },
    "/search_his.json":{
      get: function(req,res){
        var user_id = req.query.user_id;
        SearchHistory.findAll({
          where:{
            user_id:user_id
          },
          offset: 0,
          limit: 20,
          order: "id desc",
          raw:true
        }).then(function(records){
          res.send(records)
        }).error(function(){
          res.send([])
        })
       
      }
    },
    "/login": {
      get: function (req, res) {
        request.get({
          uri: 'https://api.weixin.qq.com/sns/jscode2session?appid=wxe2fe1e9869402625&secret=56c2978a72758d0a6f268b798e27bedc&js_code=' + req.query.code + '&grant_type=authorization_code',
          json: true
        }, function (e, r, body) {
          res.send(body);
        });
      }
    },
    "/register": {
      post: function (req, res) {

        var appId = 'wxe2fe1e9869402625'
        var sessionKey = req.body.sessionKey;
        var encryptedData = req.body.encryptedData;
        var iv = req.body.iv

        try {
          var pc = new WXBizDataCrypt(appId, sessionKey)

          var data = pc.decryptData(encryptedData, iv)
          if (data && data.unionId) {

            func_user.add(data, function () {
              res.send({});
            })
          } else {
            res.send({});
          }
        } catch (e) {
          res.send({});
        }

      }
    },
    "/xqr/:id.json": {
      get: function (req, res) {
        // request.get({
        //     uri:'https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=wxe2fe1e9869402625&secret=56c2978a72758d0a6f268b798e27bedc',
        //     json:true
        // },function(e,r,body){
        //     body = JSON.parse(body);
        //     if(body&&body.access_token){
        //         request({
        //             method: 'POST',
        //             uri:'https://api.weixin.qq.com/wxa/getwxacodeunlimit?access_token='+body.access_token,
        //             body:'{"path": "pages/index/detail/index","scene":"'+req.params.id+'", "width": 430}'
        //         }).pipe(fs.createWriteStream('./static/xqr/' + req.params.id + '.png'));
        //
        //     }else{
        //         res.send({})
        //     }
        // })
        create_xqr(req.params.id);
        func_music.update(req.params.id, {
          qr: 'https://www.html-js.com/static/xqr/' + req.params.id + '.png'
        }, function () {
          res.send({
            url: 'https://www.html-js.com/static/xqr/' + req.params.id + '.png'
          })
        })

      }
    },
    "/get_share_text": {
      get: function (req, res, next) {
        var user_id = req.query.user_id;
        var playCount = 0;
        var text = '';
        var isandroid = (req.header('user-agent').toLowerCase().indexOf('android') != -1)
        var url = isandroid ? 'http://www.html-js.com/music' : 'https://itunes.apple.com/cn/app/id998079819'
        MusicPlay.count({
          where: {
            user_id: user_id
          }
        }).success(function (m) {
          playCount = m || 0;
          if (playCount > 30) {
            text = `我在「喵老师绘本故事」app 收听了 ${playCount} 次故事，推荐一下这个 app，小孩子非常喜欢`;
          } else {
            text = `这个讲故事app真不错，小孩子非常喜欢，据说是一对夫妻开发的，很赞。`;
          }

          res.send({
            url: url,
            text: text,
            pic: 'http://img.souche.com/test/939cd484e97ac60b6d24147c3bb156fb.png',
            share_type: 1
          })

        }).error(function (e) {
          return next(e);
        });
      }
    },
    "/get_by_isbn/:isbn": {
      get: function (req, res) {
        func_music.getByField({'isbn': req.params.isbn}, function (err, data) {
          if (!data) {
            res.send({
              success: 0
            });
          } else {
            res.send(data);
          }

        })
      }
    },
    "/share_success": {
      post: function (req, res, next) {
        var user_id = req.body.user_id;
        var story_id = req.body.story_id;
        var text = req.body.text;
        MusicShare.create({
          user_id: user_id,
          story_id: story_id,
          text: text
        })
        res.send({})
      }
    },
    "/show_url": {
      get: function (req, res, next) {
        res.send({
          show: 0,
          url: "http://www.html-js.com/music"
        });
      }
    },
    "/": {
      get: function (req, res, next) {
        var condition, count, page;
        page = req.query.page || 1;
        count = req.query.count || 20;
        condition = null;
        return func_music.count(condition, function (error, _count) {
          if (error) {
            return next(error);
          } else {
            res.locals.total = _count;
            res.locals.totalPage = Math.ceil(_count / count);
            res.locals.page = req.query.page || 1;
            return func_music.getAll(page, count, condition, 'musics.index desc', function (error, musics) {
              if (error) {
                return next(error);
              } else {
                res.locals.musics = musics;
                return res.render('music/all.jade');
              }
            });
          }
        });
      }
    },
    "/admin/list": {
      get: function (req, res, next) {
        var condition, count, page;
        page = req.query.page || 1;
        count = req.query.count || 20;
        condition = null;
        func_music.count(condition, function (error, _count) {
          if (error) {
            return next(error);
          } else {
            res.locals.total = _count;
            res.locals.totalPage = Math.ceil(_count / count);
            res.locals.page = req.query.page || 1;
            return func_music.getAll(page, count, condition, 'musics.index desc', function (error, musics) {
              if (error) {
                return next(error);
              } else {
                res.locals.musics = musics;
                async.eachLimit(musics,5,function(music,cb){
                  music.cats = [];
                  func_cat_music.getAll(1,50,{music_id:music.id},function(err,cats){
                    cats.forEach(function(c){
                      music.cats.push(c.cat_id);
                    })
                    cb();
                  })
                },function(){
                  MusicCat.getAll(1,200,{},function(err,cats){
                    res.locals.cats = cats;
                    return res.render('music/list-admin.jade');
                  })
                })


              }
            });
          }
        });

      }
    },
    "/list.json": {
      get: function (req, res, next) {
        var condition, count, page;
        page = req.query.page || 1;
        count = req.query.count || 20;
        condition = {};

        return func_music.count(condition, function (error, _count) {
          if (error) {
            return res.send(error);
          } else {
            res.locals.total = _count;
            res.locals.totalPage = Math.ceil(_count / count);
            res.locals.page = req.query.page || 1;
            return func_music.getAll(page, count, condition, 'musics.index desc', function (error, musics) {
              if (error) {
                return res.send(error);
              } else {
                res.locals.musics = musics;
                musics.forEach(function (music) {
                  if (music.cover.indexOf('upaiyun') != -1) {
                    if (music.cover.indexOf('!') == -1) {
                      music.cover = music.cover + '!/fh/400'
                    }
                  }
                })
                return res.send({
                  musics: musics,
                  total: _count,
                  totalPage: Math.ceil(_count / count),
                  page: page
                });
              }
            });
          }
        });
      }
    },
    "/zips.json": {
      get: function (req, res, next) {
        var condition, count, page;
        page = req.query.page || 1;
        count = req.query.count || 20;
        condition = {
          zip:{
            ne:''
          }
        };

        return func_music.count(condition, function (error, _count) {
          if (error) {
            return res.send(error);
          } else {
            res.locals.total = _count;
            res.locals.totalPage = Math.ceil(_count / count);
            res.locals.page = req.query.page || 1;
            return func_music.getAll(page, count, condition, 'musics.zip_time desc', function (error, musics) {
              if (error) {
                return res.send(error);
              } else {
                musics.forEach(function (m) {
                  m.dataValues.timeago = moment(m.zip_time).fromNow();
                })
                return res.send({
                  musics: musics,
                  total: _count,
                  totalPage: Math.ceil(_count / count),
                  page: page
                });
              }
            });
          }
        });
      }
    },

    "/index/v2.json": {
      get: function (req, res, next) {
        var result = {}
        var user_id = req.query.user_id;
        async.parallel([
          function (callback) {
            // 最近播放
            if (user_id) {
              sequelize.query('select' +
                ' music_play.createdAt,musics.cover,musics.index,musics.duration,musics.id,musics.title,musics.visit_count,musics.play_count,musics.fav_count,musics.zip from music_play ' +
                'LEFT JOIN musics ON (musics.id = music_play.music_id) where music_play.user_id=\'' + user_id + '\'  and music_play.music_id != 0 order by music_play.updatedAt desc limit 0,15;').then(function (musics) {
                result.recentPlays = musics;
                musics.forEach(function (m) {
                  m.timeago = "最近";//moment(m.createdAt).fromNow();
                })
                callback();
              })
            } else {
              result.recentPlays = [];
              callback();
            }


          },
          function (callback) {
            // 最近更新
            // var musics = indexCaches.get('recentPublishs')
            // if(musics){
            //   result.recentPublishs = musics;
            //   callback();
            // }else{
              func_music.getAll(1, 10, {}, 'musics.index desc', function (error, musics) {
                if (error) {

                } else {
                  musics.forEach(function (m) {
                    m.dataValues.timeago = "最近";//moment(m.createdAt).fromNow();
                  })
                  result.recentPublishs = musics;
                  indexCaches.set('recentPublishs',musics)
                }
                callback();
              });
            // }
          },
          function (cb) {
            // 有图本的
            sequelize.query('select * from musics where zip!=\'\' order by zip_time desc,musics.index desc limit 0,10' +
              ' ').then(function (musics) {
              musics.forEach(function (m) {
                m.timeago = moment(m.zip_time).fromNow();
              })
              result.zips = musics;
              cb();
            })

          },
          function (cb) {
            // 最近流行
            func_music.getAll(1, 10, {}, 'musics.fav_count desc', function (error, musics) {
              if (error) {

              } else {
                result.populars = musics;
              }
              cb();
            });
          },
          function (cb) {
          var cats = indexCaches.get('cats')
            if(cats){
              result.cats = cats;
              cb();
            }else{
              //获取要显示的分类
              MusicCat.getAll(1, 100, {is_show: 1}, function (err, cats) {
                async.eachLimit(cats, 1, function (cat, callback) {
                  sequelize.query('select' +
                    ' musics.cover,musics.id,musics.title,musics.duration,musics.index,musics.visit_count,musics.play_count,musics.fav_count,musics.zip from music_cat_music  LEFT JOIN musics\n' +
                    '       ON (musics.id = music_cat_music.music_id) where music_cat_music.cat_id=' + cat.id + ';').then(function (musics) {
                    cat.dataValues.musics = musics;
                    callback();
                  })
                }, function () {
                  result.cats = cats;
                  indexCaches.set('cats',cats)
                  cb();
                })
              });
            }

          }, function(cb){
            func_music.count({},function(err,count){
              result.totalCount = count;
              cb();
            })
          }, function(cb){
            func_message.getAll(1, 2, {}, 'createdAt desc', function (error, messages) {
                messages.forEach(function(m){
                  m.dataValues.time = moment(m.createdAt).fromNow();
                })
                result.messages = messages;
                cb();
            });
          },
          function(cb){
            var last_id = req.query.last_id;
            var condition = null;
            if (last_id) {
              condition = ['id > ?', last_id];
            }else{
              condition = {}
            }
            func_message.count(condition, function (error, _count) {
              result.message_unread = _count;
              cb();
            });
          }
        ],function () {
          result.banners = [
          ]
          result.bannerLinks = [
          ]

          result.smallBanner = [
            {
            title:'新功能介绍：边听边看绘本',
            desc:'内置绘本，播放故事时可以自动弹出看书的界面',
            link:'http://miaobbs.miaoabc.com/topic/22/%E6%96%B0%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D-%E8%BE%B9%E5%90%AC%E8%BE%B9%E7%9C%8B%E7%BB%98%E6%9C%AC',
            bg:'https://img.souche.com/test/9867774d027622b829141a9bdfa00066.png'
          }
          ]
          res.send(result);
        })
      }
    },
    ".json": {
      get: function (req, res, next) {
        var condition, last_id;
        last_id = req.query.last_id;
        condition = null;
        if (last_id) {
          condition = ['id > ?', last_id];
        }
        if (!last_id) {
          last_id = -1;
        }
        if (musics[last_id]) {
          return res.send(musics[last_id]);
        } else {
          return func_music.getAll(1, 10000, condition, 'musics.index desc', function (error, musics) {
            if (error) {
              return res.send(error);
            } else {
              res.locals.musics = musics;
              res.send(musics);
              if (!musics[last_id]) {
                return musics[last_id] = musics;
              }
            }
          });
        }
      }
    },
    "/updateDuration": {
      post: function (req, res, next) {
        func_music.update(req.body.id, {
          duration: req.body.duration
        }, function (err, music) {
          return res.redirect('/music/' + music.id);
        })
      }
    },
    "/updateZip": {
      post: function (req, res, next) {
        func_music.update(req.body.id, {
          zip: req.body.zip,
          zip_time: new Date()
        }, function (err, music) {
          return res.redirect('/music/' + music.id);
        })
      }
    },
    "/add": {
      get: function (req, res, next) {

        if (req.query.id) {
          func_music.getById(req.query.id, function (err, music) {
            res.locals.music = music;
            return res.render('music/add.jade');
          })
        } else {
          return res.render('music/add.jade');
        }

      },
      post: function (req, res, next) {
          if(!req.body.zip_time){
              delete req.body.zip_time;
          }
        if (req.body.id) {
          func_music.update(req.body.id, req.body, function (err, music) {
            return res.redirect('/music/' + music.id);
          })
          return;
        }
if(req.body.zip_time){
res.send({});
return;
}      
  return func_music.add(req.body, function (error, music) {
          musics = {};
          create_xqr(music.id);
          func_music.update(music.id, {
            qr: 'https://www.html-js.com/static/xqr/' + music.id + '.png'
          }, function () {

          })
          send_msg(music);
          var content = `《${req.body.title}》${req.body.desc.split('。')[0].substr(0, 50)} 点击收听>>`

          addMessage(`第${req.body.index}期故事驾到啦`,content,1,'',music.id,1);


          return res.redirect('/music/' + music.id);
        });
      }
    },
    "/last_story.json": {
      get: function (req, res, next) {
        func_music.getAll(1, 1, {}, 'musics.index desc', function (error, musics) {
          if (error) {
            return res.send(error);
          } else {
            if (musics.length) {
              res.send(musics[0])
            } else {
              res.send({})
            }
          }
        });
      }
    },
    "/:id/next.json": {
      get: function (req, res, next) {
        var condition, last_id;
        last_id = req.params.id;
        condition = null;
        if (last_id) {
          condition = ['id > ?', last_id];
        }
        func_music.getAll(1, 1, condition, 'musics.index asc', function (error, musics) {
          if (error) {
            return res.send(error);
          } else {
            if (musics.length) {
              res.send(musics[0])
            } else {
              res.send({})
            }
          }
        });
      }
    },
    "/:id/prev.json": {
      get: function (req, res, next) {
        var condition, last_id;
        last_id = req.params.id;
        condition = null;
        if (last_id) {
          condition = ['id < ?', last_id];
        }
        func_music.getAll(1, 1, condition, 'musics.index desc', function (error, musics) {
          if (error) {
            return res.send(error);
          } else {
            if (musics.length) {
              res.send(musics[0])
            } else {
              res.send({})
            }
          }
        });
      }
    },

    "/tool/:id": {
      get: function (req, res, next) {
        return func_music.getById(req.params.id, function (error, music) {
          if (error) {
            return next(error);
          } else {
            return func_music.getNext(req.params.id, function (error, next) {
              if (next) {
                res.locals.next = next;
              }
              res.locals.music = music;
              res.render('music/music-tool.jade');
              return func_music.addCount(req.params.id, 'visit_count', (function () {
              }), 1);
            });
          }
        });
      }
    },
    "/add_favs": {
      post: function (req, res, next) {
        var user_id = req.body.user_id;
        var push_id = req.body.push_id;
        var favs = req.body.favs.split(',')

        async.eachLimit(favs, 1, function (music_id, callback) {
          func_fav.get({
            user_id: user_id,
            music_id: music_id
          }, function (err, fav) {
            if (!fav) {
              func_fav.add({
                user_id: user_id,
                push_id: push_id,
                music_id: music_id
              }, function () {
                callback();
              })
              func_music.addCount(music_id, 'fav_count', (function () {
              }), 1);
            } else {
              callback();
            }

          })

        }, function () {
          res.send('ok')
        });

      }
    },
    "/add_fav": {
      post: function (req, res, next) {
        var user_id = req.body.user_id;
        var push_id = req.body.push_id;
        var music_id = req.body.music_id
        func_fav.get({
          user_id: user_id,
          music_id: music_id
        }, function (err, fav) {
          if (!fav) {
            func_fav.add({
              user_id: user_id,
              push_id: push_id,
              music_id: music_id
            }, function () {
              res.send('ok')
            })
          } else {
            func_fav.update(fav.id, {
              user_id: user_id,
              push_id: push_id,
              music_id: music_id
            }, function () {
              res.send('ok')
            })
          }

        })


        func_music.addCount(req.body.music_id, 'fav_count', (function () {
        }), 1);
      },
      delete: function (req, res, next) {
        var user_id = req.body.user_id;
        var push_id = req.body.push_id;
        var music_id = req.body.music_id
        func_fav.get({
          user_id: user_id,
          music_id: music_id
        }, function (err, fav) {
          if (!fav) {

          } else {
            func_fav.delete(fav.id, function () {
              res.send('ok')
            })
          }
        })
      }
    },
    "/get_favs": {
      get: function (req, res) {
        func_fav.getAll(1, 10000, {user_id: req.query.user_id}, 'updatedAt desc', function (err, favs) {
          if (favs && favs.length) {
            async.eachLimit(favs, 1, function (fav, callback) {
              func_music.getById(fav.music_id, function (err, music) {
                if (music) {
                  fav.dataValues.music = music;
                } else {
                  fav.dataValues.music = {};
                }
                callback();
              })
            }, function () {
              res.send(favs || []);
            });
          } else {
            res.send([]);
          }

        })
      }
    },
    "/get_plays": {
      get: function (req, res) {
        func_play.getAll(1, (req.query.count || 60), {user_id: req.query.user_id}, 'updatedAt desc', function (err, plays) {
          if (plays && plays.length) {
            async.eachLimit(plays, 1, function (play, callback) {
              func_music.getById(play.music_id, function (err, music) {
                if (music) {
                  play.dataValues.music = music;
                } else {
                  play.dataValues.music = {};
                }
                callback();
              })
            }, function () {
              res.send(plays || []);
            });
          } else {
            res.send([]);
          }

        })
      }
    },
    "/add_play": {
      post: function (req, res, next) {
        var user_id = req.body.user_id;
        var push_id = req.body.push_id;
        var music_id = req.body.music_id
        func_play.get({
          user_id: user_id,
          music_id: music_id
        }, function (err, fav) {
          if (!fav) {
            func_play.add({
              user_id: user_id,
              push_id: push_id,
              music_id: music_id
            }, function () {
              res.send('ok')
            })
          } else {
            func_play.update(fav.id, {
              user_id: user_id,
              push_id: push_id,
              music_id: music_id
            }, function () {
              res.send('ok')
            })
          }

        })


        func_music.addCount(req.body.music_id, 'play_count', (function () {
        }), 1);
      }
    },
    "/:id.json": {
      get: function (req, res, next) {
        return func_music.getById(req.params.id, function (error, music) {

          if (error) {
            return res.send(error);
          } else {
            if (!music) {
              return res.send({})
            }
            async.series([
              function(cb){
                MusicFav.find({
                  where: {
                    user_id: req.query.user_id || -1,
                    music_id: req.params.id
                  }
                }).success(function (ms) {
                  if (ms) {
                    music.dataValues.has_faved = 1;
                  } else {
                    music.dataValues.has_faved = 0;
                  }
                  music.dataValues.has_share_timeline = 1;
                  cb();
                }).error(function(){
                  cb();
                })
              },
              function(cb){
                if (music.has_share) {
                  MusicShare.find({
                    where: {
                      user_id: req.query.user_id || -1,
                      story_id: req.params.id
                    }
                  }).success(function (m) {
                    if (m) {
                      music.has_share = 0;
                    } else {

                    }
                    cb()
                  }).error(function () {
                    cb()
                  })
                } else {
                  cb();
                }
              }
            ],function(){
              res.send(music);
            })

            return func_music.addCount(req.params.id, 'visit_count', (function () {
            }), 1);
          }
        });
      }
    },
    
    "/popup": {
      get: function(req,res){
        res.send({
          success:1,
          url: 'http://img.souche.com/test/ec32ba567d8fdb9a56e41915a7e63614.png?x-oss-process=image/resize,w_560',
          id: 8
        })
      }
    },
    "/:id": {
      get: function (req, res, next) {
        return func_music.getById(req.params.id, function (error, music) {
          if (error) {
            return next(error);
          } else {
            return func_music.getNext(req.params.id, function (error, next) {
              if (next) {
                res.locals.next = next;
              }
              res.locals.music = music;
              if (req.header('User-Agent').indexOf('Html5Plus') != -1) {
                res.render('music/music-android.jade');
              } else {
                res.render('music/music.jade');
              }
              return func_music.addCount(req.params.id, 'visit_count', (function () {
              }), 1);
            });
          }
        });
      }
    }
  };
  // module.exports.filters = {
  //     "/:id.json": {
  //         get: ['music']
  //     },
  //     "/:id":{
  //         get: ['music']
  //     }
  //
  // }
}).call(this);


